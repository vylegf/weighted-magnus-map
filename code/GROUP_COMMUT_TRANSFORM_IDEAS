(тут будет про то, как реализовать преобразования между групповыми коммутаторами на питоне)
Пока что только прямоугольная группа Кокстера,  хотя надо обобщать.

1. Класс Comm (вложенный коммутатор вида (1,(8,(3,5))); возможно, в степени \pm 1?)
Элементы: список
	elems = [1,8,3,5];
булевская переменная "обратный к нему или нет"
	invert=False
Базовые методы:
	унарный минус
	конструктор по списку
	длина
	...
	
2. Класс Word (слово от вложенных коммутаторов)
Элементы: список letters элементов типа Comm; возможно, пустой.
Базовые методы:
	слово конструирует одноэлементный список;
	проверка на непустоту;
	унарный минус;
	плюс работает как конкатенация _с сокращениями_ (надеюсь, что sum можно перегрузить);
	минус работает как a-b = a+(-b).


3. Алгоритмическое:
3.1. Функция "навесить элемент на Comm" (для краткости Comm_CL(g,K) ):
	сделать из коммутатора K и элемента группы g коммутатор (g,K). На обратный тоже надо навешивать:
	(g,K^{-1}) = K (g,K)^{-1} K^{-1}; то есть что-то в духе
	"Comm_CL(g,-K) := K-Comm_CL(g,K)-K."
	
3.2. Функция "навесить элемент на Word" (для краткости Word_CL(g,W) ): то же самое с помощью тождества
	(g,ABCDEF)=(g,F)F^{-1}(g,E)E^{-1}...B^{-1}(g,A)BCDEF
	заметим, что вместо (g,E^{-1})E можно сразу писать E(g,E)^{-1}, то есть не выражать эту функцию через Comm_CL
	
3.3. Функция "Through The Inverse" (для краткости TTI(K) ):
	выразить коммутатор (a,(b,(c,(d,e))))) через (a,(b,(c,(e,d))))^{-1}
	и коммутаторы меньшей длины, у которых тоже (e,d) в самом конце.
	Не до конца продумал, но основная идея такая: если K=(a,K0),
	то TTI(K):=-TTI(K0)-Word_CL(g, -TTI(K0))+TTI(K0);
	(это основано на тождестве (a,K0)=K0^{-1} (a,K0^{-1})^{-1} K0 );
	для коротких пишем TTI( (a,b) ) = (b,a)^{-1}.
	Кажется, если так делать, то в TTI( (a,(b,(c,(d,e)))) ) не будет коммутаторов с (d,e) в конце, только (e,d).
(замечание: возможно, проще/полезнее окажется написать функцию, вычисляющую -TTI(K) вместо TTI(K) )
	
3.4 Функция "Переставить соседние не последние элементы" (для краткости Word_Swap(W,i,j) ):
	реализуется по понятному принципу: был коммутатор (a,(b,(.....(x,(y,K))....));
	пишем Витта-Холла для (x,(y,K)); избавляемся от (K,(x,y)) = K^{-1}(y,x)K(x,y);
	навешиваем на это Word_CL(a,Word_CL(b,...)).

3.5 Функция "разобраться с последними тремя элементами": пока не продумал, но ниже она точно пригодится.
	Видимо, она сведётся к TTI(K) и к тому, чтобы из (x,(a,b)) сделать (b,(a,x)) и (a,(x,b)) по Витту-Холлу.

Все функции со смыслом "выразить через базис" должны существовать в двух вариантах: для слова и для коммутатора
	(для слова это просто "Express(W):= sum(Express(L) for L in W.letters)").
	Для коммутатора, кстати, везде надо писать костыль типа "if C.invert==True: return -Express(-C);"
	именно поэтому у меня нет уверенности, что галочка "invert" нужна. Может, лучше добавить массив знаков в Word?
	
3.6 Функция "Выразить через базис П.-В. для коммутанта свободной группы":
	Просто переставить в коммутаторе максимальный элемент на предпоследнее место, а потом упорядочить первые s-2.
	
3.7 Функция "Выразить через базис П.-В. для граф-произведения":
	Сначала предыдущую, а потом разобраться с минимальным элементом в компоненте связности последнего элемента.
	Тут два случая: либо эта компонента содержит предпоследний (и тогда надо убивать), либо не содержит.
	В любом случае это предыдущее + надо знать пути в графе (с этим я вроде разбирался).

3.8 Функция "Выразить коммутаторы, сгруппированные в другую сторону" (вида (((((a,b),c),d),e),f) ):
	делается мгновенно с помощью Word_CR(W,g):= -Word_CL(g,W) и Comm_CR(K,g):= - Comm_CL(g,K)

